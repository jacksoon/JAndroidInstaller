/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package JAndroidInstaller.InstallerUI;

import JAndroidInstaller.AndroidDevice.APKBaseInfoEntry;
import JAndroidInstaller.AndroidDevice.USBDeviceChecker;
import JAndroidInstaller.AndroidDevice.USBDeviceInstaller;
import JAndroidInstaller.AndroidDevice.USBDeviceWorker;
import java.awt.Font;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author wcss
 */
public class JAPKInstallerMainUI extends javax.swing.JFrame implements Runnable {

    public static HashMap<String, String> deviceList = null;
    public static String currentProductID = "";
    public static String currentDeviceID = "";
    public static File currentAPKFile = null;
    private static File installingAPK = null;
    private static Boolean installingToPhone = false;
    private static ArrayList<String> pathLists = new ArrayList<String>();
    private static int currentPathIndex = 0;

    /**
     * Creates new form JAPKInstallerMainUI
     */
    public JAPKInstallerMainUI() {
        initComponents();
        this.setTitle("APK安装器 V1.4");
        this.setLocationRelativeTo(null);
        deviceList = USBDeviceChecker.getMakerTable();
        try {
            ArrayList<String> data = USBDeviceChecker.getDeviceData();
            for (String sss : data) {
                String[] team = sss.split(":");
                if (!USBDeviceChecker.getMakerName(team[0]).equals("None")) {
                    currentProductID = team[0];
                    break;
                }
            }
            if (deviceList.containsKey(currentProductID)) {
                this.lblProduct.setText(deviceList.get(currentProductID));
            } else {
                this.lblProduct.setText("未知");
            }

            String deviceInfo = USBDeviceWorker.getFirstActiveDevice();
            if (deviceInfo != null) {
                String[] fff = deviceInfo.split(" ");
                currentDeviceID = fff[0].replace("device", "").trim();
            }
            this.lblPhoneName.setText(currentDeviceID);
            this.lblAdbVersion.setText(USBDeviceWorker.getAdbServerVersion());
            this.onloads();
        } catch (Exception ex) {
            Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblPhoneName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblAdbVersion = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtAPKFile = new javax.swing.JTextField();
        btnSelect = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSoftInfo = new javax.swing.JTextArea();
        lblInstallInfo = new javax.swing.JLabel();
        btnInstallSdcard = new javax.swing.JButton();
        btnInstallPhone = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnReturn = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnLoadFile = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnMkdir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlFiles = new javax.swing.JList();
        txtPath = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Android硬件信息"));

        jLabel1.setText("品牌：");

        lblProduct.setText("None");

        jLabel2.setText("型号：");

        lblPhoneName.setText("None");

        jLabel4.setText("ADB版本：");

        lblAdbVersion.setText("jLabel5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPhoneName, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAdbVersion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblProduct)
                    .addComponent(jLabel2)
                    .addComponent(lblPhoneName)
                    .addComponent(jLabel4)
                    .addComponent(lblAdbVersion))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Android应用软件安装"));
        jPanel2.setToolTipText("");

        jLabel3.setText("包文件：");

        txtAPKFile.setEditable(false);

        btnSelect.setText("选取");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("安装包信息："));

        txtSoftInfo.setColumns(20);
        txtSoftInfo.setRows(5);
        jScrollPane1.setViewportView(txtSoftInfo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        lblInstallInfo.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblInstallInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnInstallSdcard.setText("安装到SDCard");
        btnInstallSdcard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallSdcardActionPerformed(evt);
            }
        });

        btnInstallPhone.setText("安装到手机");
        btnInstallPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallPhoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAPKFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblInstallInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInstallPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInstallSdcard)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAPKFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblInstallInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addComponent(btnInstallPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(btnInstallSdcard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("APK安装", jPanel2);

        btnReturn.setText("返回");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnDel.setText("删除");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnLoadFile.setText("导入文件");
        btnLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFileActionPerformed(evt);
            }
        });

        btnExport.setText("导出文件");
        btnExport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExportMouseClicked(evt);
            }
        });
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnMkdir.setText("创建目录");
        btnMkdir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMkdirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReturn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoadFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMkdir)
                .addContainerGap(219, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnDel)
                    .addComponent(btnLoadFile)
                    .addComponent(btnExport)
                    .addComponent(btnMkdir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jlFiles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlFilesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jlFiles);

        txtPath.setEditable(false);
        txtPath.setText("jTextField1");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(txtPath))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPath, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("文件管理", jPanel4);

        jLabel5.setText("注：本程序在进行文件管理时，需要Android端有busybox的支持！");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public long getFileSize(File f) throws Exception//取得文件夹大小
    {
        long size = f.length();
//        File flist[] = f.listFiles();
//        for (int i = 0; i < flist.length; i++)
//        {
//            if (flist[i].isDirectory())
//            {
//                size = size + getFileSize(flist[i]);
//            } else
//            {
//                size = size + flist[i].length();
//            }
//        }
        return size;
    }

    public void printSoftInfo(String str) {
        this.txtSoftInfo.setText(this.txtSoftInfo.getText() + str + "\n");
    }

    public String getSDKVersion(String sdkver) {
        String name = "";
        int sdkVersion = Integer.parseInt(sdkver);
        switch (sdkVersion) {
            case 1: {
                name = "Android 1.0";
            }
            break;
            case 2: {
                name = "Android 1.1";
            }
            break;
            case 3: {
                name = "Android 1.5";
            }
            break;
            case 4: {
                name = "Android 1.6";
            }
            break;
            case 5: {
                name = "Android 2.0";
            }
            break;
            case 6: {
                name = "Android 2.0.1";
            }
            break;
            case 7: {
                name = "Android 2.1.x";
            }
            break;
            case 8: {
                name = "Android 2.2.x";
            }
            break;
            case 9: {
                name = "Android 2.3, 2.3.1, 2.3.2";
            }
            break;
            case 10: {
                name = "Android 2.3.3, 2.3.4";
            }
            break;
            case 11: {
                name = "Android 3.0.x";
            }
            break;
            case 12: {
                name = "Android 3.1.x";
            }
            break;
            case 13: {
                name = "Android 3.2";
            }
            break;
            case 14: {
                name = "Android 4.0, 4.0.1, 4.0.2";
            }
            break;
            case 15: {
                name = "Android 4.0.3, 4.0.4";
            }
            break;
            case 16: {
                name = "Android 4.1, 4.1.1";
            }
            break;
            case 17: {
                name = "Android 4.2";
            }
            break;
        }
        return name;
    }

    public void showAPKInfo(File selected) {
        if (selected.exists()) {
            try {
                currentAPKFile = selected;
                this.txtAPKFile.setText(currentAPKFile.getAbsolutePath());
                APKBaseInfoEntry aie = USBDeviceWorker.readAPKInfo(currentAPKFile.getAbsolutePath());
                printSoftInfo("包名：" + aie.getPackageEngName());
                printSoftInfo("软件名称：" + aie.getPackageCNName());
                printSoftInfo("软件版本：" + aie.getPackageVersionName());
                printSoftInfo("大小：" + (getFileSize(currentAPKFile) / 1024) + "K");
                printSoftInfo("最低支持系统：" + getSDKVersion(aie.getPackageSdkVersion()));
            } catch (Exception ex) {
                Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            currentAPKFile = null;
            this.txtSoftInfo.setText("");
        }
    }

    public void installSoftwares(File apk, Boolean toPhone) {
        if (apk != null && apk.exists()) {

            this.btnInstallPhone.setEnabled(false);
            this.btnInstallSdcard.setEnabled(false);
            installingAPK = null;
            installingAPK = apk;
            installingToPhone = toPhone;
            Thread tt = new Thread(this);
            tt.setDaemon(true);
            tt.start();
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "对不起，指定的APK文件不存在！");
        }
    }

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter ff = new FileNameExtensionFilter(null, "apk");
        fileChooser.setFileFilter(ff);
        int option = fileChooser.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            showAPKInfo(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnInstallPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallPhoneActionPerformed
        // TODO add your handling code here:
        installSoftwares(currentAPKFile, true);
    }//GEN-LAST:event_btnInstallPhoneActionPerformed

    private void btnInstallSdcardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallSdcardActionPerformed
        // TODO add your handling code here:
        installSoftwares(currentAPKFile, false);
    }//GEN-LAST:event_btnInstallSdcardActionPerformed

    private void jlFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlFilesMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() >= 2) {
            String selected = "";
            if (this.txtPath.getText().endsWith("/")) {
                selected = this.txtPath.getText() + jlFiles.getSelectedValue();
            } else {
                selected = this.txtPath.getText() + "/" + jlFiles.getSelectedValue();
            }

            try {
                watchFilesList(selected, true);
            } catch (Exception ex) {
                Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jlFilesMouseClicked

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        if (pathLists.size() > 0) {
            currentPathIndex = currentPathIndex - 1;
            pathLists.remove(currentPathIndex);

            if (pathLists.size() > 0) {
                try {
                    watchFilesList(pathLists.get(currentPathIndex - 1), false);
                } catch (Exception ex) {
                    Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
        int option = javax.swing.JOptionPane.showConfirmDialog(null, "真的要删除吗？", "提示", javax.swing.JOptionPane.YES_NO_OPTION);
        if (option == javax.swing.JOptionPane.YES_OPTION) {
            if (jlFiles.getSelectedValue() != null) {
                String delpath = this.txtPath.getText() + jlFiles.getSelectedValue();
                try {
                    USBDeviceWorker.deleteFileAndDir(delpath);

                    watchFilesList(this.txtPath.getText(), false);
                } catch (Exception ex) {
                    Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnDelActionPerformed

    public File[] showOpenDialogs() {
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("选择要导入的文件！");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setMultiSelectionEnabled(true);
        int option = jfc.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            return jfc.getSelectedFiles();
        } else {
            return null;
        }
    }

    public String showSaveDialogs() {
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("选择要导出的文件保存位置！");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int option = jfc.showSaveDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            return jfc.getSelectedFile().getAbsolutePath();
        } else {
            return "";
        }
    }

    public void uploadFileLists() {
        try {
            watchFilesList(txtPath.getText(), false);
        } catch (Exception ex) {
            Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFileActionPerformed
        // TODO add your handling code here:            
        File[] destt = showOpenDialogs();
        if (destt != null) {
            new JAPKInstallerCopyFiles(this, destt, txtPath.getText()).setVisible(true);
        }
    }//GEN-LAST:event_btnLoadFileActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        if (jlFiles.getSelectedValue() != null) {
            String sourr = txtPath.getText() + jlFiles.getSelectedValue();
            String destt = showSaveDialogs();
            if (!destt.equals("")) {
                try {
                    USBDeviceWorker.copyFromSdcard(sourr, destt);
                    javax.swing.JOptionPane.showMessageDialog(null, "完成!");
                } catch (Exception ex) {
                    Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnMkdirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMkdirActionPerformed
        // TODO add your handling code here:
        String mkdirName = javax.swing.JOptionPane.showInputDialog(null, "请输入新的目录名！");
        if (!mkdirName.trim().equals("")) {
            String newMkdir = txtPath.getText() + mkdirName;
            try {
                USBDeviceWorker.shellCmdNoResult("mkdir " + newMkdir);
            } catch (Exception ex) {
                Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.uploadFileLists();
        }
    }//GEN-LAST:event_btnMkdirActionPerformed

    private void btnExportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExportMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExportMouseClicked

    private static void bootMainUI() {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JAPKInstallerMainUI().setVisible(true);
            }
        });
    }

    private static void bootMainUI(String apks) {
        final String apkss = apks;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JAPKInstallerMainUI main = new JAPKInstallerMainUI();
                main.showAPKInfo(new File(apkss));
                main.setVisible(true);
            }
        });
    }

    public static void startMainUI(String[] args) {
        if (args != null && args.length >= 1) {
            bootMainUI(args[0].trim());
        } else {
            bootMainUI();
        }
    }
    public static String[] currentArgs = null;

    private static Boolean onlyNeedRestartAdbServer() throws Exception {
        Boolean result = false;

        ArrayList<String> lists = USBDeviceChecker.getDeviceData();
        for (String sss : lists) {
            String[] tt = sss.split(":");
            if (USBDeviceInstaller.isUSBDeviceInstalled(tt[0].trim())) {
                result = true;
                break;
            }
        }
        return result;
    }

    private static void checkDeviceStatus(String args[]) {
        try {
            USBDeviceInstaller.restartAdbServer();
            if (USBDeviceWorker.isAndroidDeviceOnline())
            {
               startMainUI(args);
            }else
            {
               int option = javax.swing.JOptionPane.showConfirmDialog(null,"对不起，没有检查到你的设备！你可以按如下方法进行尝试：先将'USB调试'功能关闭后再打开,然后重新插拔USB数据线，最后按'是'按钮继续，或按'否'退出！" , "设备异常！", javax.swing.JOptionPane.YES_NO_OPTION);
               if (option == javax.swing.JOptionPane.YES_OPTION)
               {
                   checkDeviceStatus(args);
               }else
               {
                   System.exit(0);
               }
            }
        } catch (Exception ex) {
            Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if (javax.swing.UIManager.getSystemLookAndFeelClassName().equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }

                java.util.Enumeration enums = UIManager.getDefaults().keys();
                String str;
                while (enums.hasMoreElements()) {
                    if ((str = enums.nextElement().toString()).endsWith("font")) { //只要与字体相关
                        UIManager.put(str, new Font("文泉驿微米黑", 0, 12));
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            System.out.println("当前Android工作目录：" + USBDeviceInstaller.androidToolDir);
            currentArgs = args;
            String deviceStr = USBDeviceWorker.getFirstActiveDevice();
            System.out.println("检测到的设备类型：" + deviceStr);

            if (USBDeviceWorker.isAndroidDeviceOnline()) {
                System.out.println("设备可用！");
                startMainUI(args);
            } else {
                System.out.println("无可用设备！");
                if (onlyNeedRestartAdbServer()) {
                    checkDeviceStatus(args);
                } else {
                    java.awt.EventQueue.invokeLater(new Runnable()
                    {
                        public void run() {
                            new JAPKInstallerDriverUI().setVisible(true);
                        }
                    });
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnInstallPhone;
    private javax.swing.JButton btnInstallSdcard;
    private javax.swing.JButton btnLoadFile;
    private javax.swing.JButton btnMkdir;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList jlFiles;
    private javax.swing.JLabel lblAdbVersion;
    private javax.swing.JLabel lblInstallInfo;
    private javax.swing.JLabel lblPhoneName;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JTextField txtAPKFile;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextArea txtSoftInfo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            if (installingToPhone) {
                this.lblInstallInfo.setText("正在安装到手机...");
            } else {
                this.lblInstallInfo.setText("正在安装到SDCard...");
            }

            Boolean result = USBDeviceWorker.installSoftware(installingAPK.getAbsolutePath(), installingToPhone);
            if (result) {
                this.lblInstallInfo.setText("APK安装成功！");
            } else {
                this.lblInstallInfo.setText("APK安装失败！");
            }
        } catch (Exception ex) {
            Logger.getLogger(JAPKInstallerMainUI.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(null, "对不起，指定的APK文件安装失败！");
        }
        this.btnInstallPhone.setEnabled(true);
        this.btnInstallSdcard.setEnabled(true);
    }

    /**
     * 查看路径
     *
     * @param path
     * @throws Exception
     */
    public void watchFilesList(String path, Boolean isrecord) throws Exception {
        String curr;

        if (path.endsWith("/")) {
            curr = path;
        } else {
            curr = path + "/";
        }

        ArrayList<String> list = USBDeviceWorker.shellCmdWithResult("ls " + curr);
        if (list.size() > 0) {
            if (list.get(0).contains("No such file or directory") || list.get(0).contains("Not a")) {
                throw new Exception("Error Path!");
            } else {
                this.txtPath.setText(curr);

                if (isrecord) {
                    pathLists.add(curr);
                    currentPathIndex++;
                }
                jlFiles.setListData(list.toArray());
            }
        } else {
            this.txtPath.setText(curr);

            if (isrecord) {
                pathLists.add(curr);
                currentPathIndex++;
            }

            jlFiles.setListData(list.toArray());
        }
    }

    /**
     * 启动载入
     *
     * @throws Exception
     */
    private void onloads() throws Exception {
        watchFilesList("", true);
    }
}
